import telebot
import logging
from telebot import types
import database
import re


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG)
logger = logging.getLogger(__name__)

token = "5153856526:AAH7uuXBS4N9Yg8t0rEyU3Dv1ciMfsOmD6E"
bot = telebot.TeleBot(token)

db = database.DataBase('data/timetable_database')

params = {'adding_timetable': False, 'current_timetable': [], 'current_user': '', 'current_day': []}
week_days = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']


@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    button = types.InlineKeyboardButton(text="–§—É–Ω–∫—Ü–∏–∏", callback_data='greeting')
    markup.add(button)
    bot.send_message(chat_id=message.from_user.id,
                     text="–ü—Ä–∏–≤–µ—Ç, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã—Ç—å –æ —Å–≤–æ—ë–º –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏ –∏ –ø–æ–º–æ–≥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ "
                          "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —É—Ä–æ–∫–æ–≤ –∏ –∑–≤–æ–Ω–∫–æ–≤! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö, "
                          "–Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def functions(call):
    if call.data == 'greeting':
        out = ('/start - –∑–¥–æ—Ä–æ–≤–∞–µ—Ç—Å—è –∏ –≤—ã–¥–∞—ë—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ\n\n'
               '/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ–º\n\n'
               '/add_timetable - –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ü—Ä–µ–¥–º–µ—Ç" "–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞" "–≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è"\n\n'
               '/lesson - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞, '
               '–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ(–ª–∏–±–æ –ø–∏—à–µ—Ç, —á—Ç–æ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)\n\n'
               '/homework - –≤—ã–¥–∞—ë—Ç –≤—Å—é –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –¥–æ–º–∞—à–Ω—é—é —Ä–∞–±–æ—Ç—É\n\n'
               '/delete_task "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞" - —É–¥–∞–ª—è–µ—Ç –∏–∑ –±–¥ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –∫–ª—é—á—É –∏–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ—Ç.\n\n'
               '/timetable - –≤—ã–¥–∞—ë—Ç –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é —Å –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–∫–∞ \n\n'
               '/delete_timetable - —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –∫–∞–∫–æ–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫\n\n'
               '/edit_timetable - —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –∫–∞–∫–æ–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫\n\n'
               '–°–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞": "–∑–∞–¥–∞–Ω–∏–µ" - –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, '
               '–µ—Å–ª–∏ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –µ—Å—Ç—å, —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± —ç—Ç–æ–º –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç, —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –∏–ª–∏ –Ω–µ—Ç.')
        bot.send_message(chat_id=call.from_user.id, text=out)
        bot.answer_callback_query(callback_query_id=call.id)


@bot.message_handler(commands=['help'])
def help_message(message):
    out = ('/start - –∑–¥–æ—Ä–æ–≤–∞–µ—Ç—Å—è –∏ –≤—ã–¥–∞—ë—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ\n\n'
           '/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ–º\n\n'
           '/add_timetable - –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ü—Ä–µ–¥–º–µ—Ç" "–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞" "–≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è"\n\n'
           '/lesson - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞, '
           '–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ(–ª–∏–±–æ –ø–∏—à–µ—Ç, —á—Ç–æ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)\n\n'
           '/homework - –≤—ã–¥–∞—ë—Ç –≤—Å—é –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –¥–æ–º–∞—à–Ω—é—é —Ä–∞–±–æ—Ç—É\n\n'
           '/delete_task "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞" - —É–¥–∞–ª—è–µ—Ç –∏–∑ –±–¥ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –∫–ª—é—á—É –∏–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ—Ç.\n\n'
           '/timetable - –≤—ã–¥–∞—ë—Ç –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é —Å –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–∫–∞ \n\n'
           '/delete_timetable - —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –∫–∞–∫–æ–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫\n\n'
           '/edit_timetable - —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –∫–∞–∫–æ–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫\n\n'
           '–°–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞": "–∑–∞–¥–∞–Ω–∏–µ" - –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, '
           '–µ—Å–ª–∏ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –µ—Å—Ç—å, —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± —ç—Ç–æ–º –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç, —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –∏–ª–∏ –Ω–µ—Ç.')
    bot.send_message(chat_id=message.from_user.id, text=out)


@bot.message_handler(commands=['set_timetable'])
def add_timetable(message):
    params['adding_timetable'] = True
    params['current_day'] = []
    params['current_timetable'] = []
    params['current_user'] = message.from_user.id

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, resize_keyboard=True)
    markup.row('/cancel', '/save', '/next')
    bot.send_message(message.from_user.id, text='–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: "–Ω–∞–∑–≤–∞–Ω–∏–µ", "–Ω–∞—á–∞–ª–æ", "–∫–æ–Ω–µ—Ü"\n'
                                                '–ù–∞–∂–º–∏—Ç–µ "cancel" –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞, '
                                                '"save" –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, '
                                                '"next" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é', reply_markup=markup)
    bot.send_message(chat_id=message.from_user.id,
                     text=f"–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {week_days[len(params['current_timetable'])].capitalize()}")
    bot.send_message(chat_id=message.from_user.id, text=f"–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–∫ ‚Ññ{len(params['current_day']) + 1}")


@bot.message_handler(commands=['cancel'])
def cancel(message):
    params['adding_timetable'] = False
    params['current_day'] = []
    params['current_timetable'] = []
    params['current_user'] = ''
    bot.send_message(chat_id=message.from_user.id, text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                     reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(commands=['save'])
def save(message):
    db.query(f"""DELETE 
                 FROM lessons 
                 WHERE id={params['current_user']}""")
    day = dict()
    day[week_days[len(params['current_timetable'])]] = params['current_day']
    params['current_timetable'].append(day)
    params['current_day'] = []
    elem_num = len(params['current_timetable']) - 1
    out = '\n'.join([f"{i + 1}) {params['current_timetable'][elem_num][week_days[elem_num]][i]}"
                     for i in range(len(params['current_timetable'][len(params['current_timetable']) - 1]
                                        [week_days[len(params['current_timetable']) - 1]]))])
    bot.send_message(chat_id=message.from_user.id,
                     text=f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ "
                          f"{week_days[len(params['current_timetable']) - 1].capitalize()}: \n{out}")

    all_users = [elem[0] for elem in db.select_with_fetchall("SELECT user_id "
                                                             "FROM users")]

    bot.send_message(chat_id=message.from_user.id, text='–°–æ—Ö—Ä–∞–Ω—è—é, –ø–æ–¥–æ–∂–¥–∏—Ç–µ üïë')
    lessons_ids = []

    for i in range(len(params['current_timetable'])):
        elem = params['current_timetable'][i]
        day = week_days[i]
        data = elem[day]
        for j in range(len(data)):
            lesson_info = [a.strip(' ') for a in data[j].split(', ')]
            lesson_name = lesson_info[0]
            lesson_start = lesson_info[1]
            lesson_end = lesson_info[2]
            user = params['current_user']

            if not db.query(f"""SELECT id 
                                FROM lessons 
                                WHERE lesson_name='{lesson_name}' AND start_time='{lesson_start}' 
                                AND end_time='{lesson_end}' AND user={user} AND day='{day}'"""):
                db.query(f"""INSERT INTO lessons(lesson_name, start_time, end_time, user, day) 
                             VALUES('{lesson_name}', '{lesson_start}', '{lesson_end}', {user}, '{day}')""")

            lesson_id = db.select_with_fetchone(f"""SELECT id 
                                                    FROM lessons 
                                                    WHERE lesson_name='{lesson_name}' AND start_time='{lesson_start}' 
                                                    AND end_time='{lesson_end}' AND user={user} AND day='{day}'""")[0]

            lessons_ids.append(lesson_id)

    if params['current_user'] in all_users:
        db.query(f"""UPDATE users 
                     SET lessons_ids = '{' '.join([str(elem) for elem in lessons_ids])}'""")
    else:
        db.query(f"""INSERT INTO users(user_id, lessons_ids) 
                     VALUES({params['current_user']}, '{' '.join([str(elem) for elem in lessons_ids])}')""")

    bot.send_message(chat_id=message.from_user.id, text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ üëç",
                     reply_markup=types.ReplyKeyboardRemove())

    params['current_timetable'] = []
    params['current_day'] = []
    params['current_user'] = ''
    params['adding_timetable'] = False


@bot.message_handler(commands=['next'])
def next_day(message):
    day = dict()
    day[week_days[len(params['current_timetable'])]] = params['current_day']
    params['current_timetable'].append(day)
    params['current_day'] = []
    elem_num = len(params['current_timetable']) - 1
    out = '\n'.join([f"{i + 1}) {params['current_timetable'][elem_num][week_days[elem_num]][i]}"
                     for i in range(len(params['current_timetable'][len(params['current_timetable']) - 1]
                                        [week_days[len(params['current_timetable']) - 1]]))])
    bot.send_message(chat_id=message.from_user.id,
                     text=f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ "
                          f"{week_days[len(params['current_timetable']) - 1].capitalize()}: \n{out}")
    bot.send_message(chat_id=message.from_user.id,
                     text=f"–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {week_days[len(params['current_timetable'])].capitalize()}")
    bot.send_message(chat_id=message.from_user.id, text=f"–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–∫ ‚Ññ{len(params['current_day']) + 1}")


@bot.message_handler(commands=['homework'])
def homework(message):
    text = message.text.split(maxsplit=1)
    subject = text[1] if len(text) > 1 else ''
    out = '–í–æ—Ç –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ '
    if subject:
        result = db.select_with_fetchall(f"""SELECT subject, text 
                                             FROM homework 
                                             WHERE subject='{subject}' AND user_id={message.from_user.id}""")
        out += f'–ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject}:\n'
    else:
        result = db.select_with_fetchall(f"""SELECT subject, text 
                                             FROM homework 
                                             WHERE user_id={message.from_user.id}""")
        out += f'–ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º:\n'
    if not result:
        out = '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
    else:
        out += '\n'.join([f"{i + 1}) {result[i][0]}: {result[i][1]}" for i in range(len(result))])
    bot.send_message(chat_id=message.from_user.id, text=out)


@bot.message_handler(commands=['delete_task'])
def delete_task(message):
    text = message.text.split(maxsplit=1)
    if len(text) == 1:
        bot.send_message(chat_id=message.from_user.id,
                         text='–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /delete_task <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞>')
    else:
        try:
            subject = text[1]
            old_homework = str(db.select_with_fetchone(f"""SELECT homework_ids 
                                                           FROM users 
                                                           WHERE user_id={message.from_user.id}""")[0]).split()
            to_delete = db.select_with_fetchone(f"""SELECT id 
                                                    FROM homework
                                                    WHERE user_id={message.from_user.id} AND subject='{subject}'""")[0]
            old_homework.remove(str(to_delete))
            db.query(f"""UPDATE users 
                         SET homework_ids='{' '.join(old_homework)}' 
                         WHERE user_id={message.from_user.id}""")
            db.query(f"""DELETE 
                         FROM homework 
                         WHERE subject='{subject}'""")
            bot.send_message(chat_id=message.from_user.id, text=f"–ó–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject} —É–¥–∞–ª–µ–Ω–æ")
        except TypeError:
            bot.send_message(chat_id=message.from_user.id, text="–ü–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π")


@bot.message_handler(commands=['timetable'])
def timetable(message):
    table = db.select_with_fetchall(f"""SELECT lesson_name, start_time, end_time, day 
                                        FROM lessons 
                                        WHERE user={message.from_user.id}""")
    if table:
        out = dict()
        out_text = ''
        for elem in table:
            if elem[3] not in out.keys():
                out[elem[3]] = [f'{elem[0]}, {elem[1]}, {elem[2]}']
            else:
                out[elem[3]].append(f'{elem[0]}, {elem[1]}, {elem[2]}')
        for key in out.keys():
            out_text += f"{str(key).capitalize()}:\n"
            for i in range(len(out[key])):
                out_text += f"{i + 1}) {out[key][i]}\n"
            out_text += '\n'
        bot.send_message(chat_id=message.from_user.id, text=out_text)
    else:
        bot.send_message(chat_id=message.from_user.id, text="–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")


@bot.message_handler(content_types=['text'])
def getting_tasks(message):
    if params['adding_timetable']:
        line = message.text
        str_type = r".*,\s.*,\s.*"
        res = re.fullmatch(str_type, line)
        if res is not None and line.count(',') == 2:
            params['current_day'].append(line)
            bot.send_message(chat_id=message.from_user.id, text=f"–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–∫ ‚Ññ{len(params['current_day']) + 1} "
                                                                f"–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ")
        else:
            bot.send_message(chat_id=message.from_user.id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
    else:
        line = message.text
        str_type = r".*:.*"
        res = re.fullmatch(str_type, line)
        if res is not None and line.count(":") == 1:
            if not db.select_with_fetchone(f"""SELECT id 
                                               FROM users 
                                               WHERE user_id={message.from_user.id}"""):
                db.query(f"""INSERT INTO users(user_id) 
                             VALUES({message.from_user.id})""")
            subject = line[:line.find(':')]
            text = line[line.find(':') + 1:]
            user = message.from_user.id
            previous = db.select_with_fetchone(f"""SELECT text 
                                                   FROM homework 
                                                   WHERE subject='{subject}' AND user_id={user}""")
            if previous:
                bot.send_message(chat_id=message.from_user.id,
                                 text=f"–°—Ç–∞—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject}: {previous[0]}")
                bot.send_message(chat_id=message.from_user.id,
                                 text=f"–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject}: {text}")
                db.query(f"""UPDATE homework 
                             SET text='{text}' 
                             WHERE user_id={user} AND subject='{subject}'""")
            else:
                db.query(f"""INSERT INTO homework(subject, text, user_id) 
                             VALUES('{subject}', '{text}', {user})""")
                homework_id = db.select_with_fetchone(f"""SELECT id 
                                                          FROM homework 
                                                          WHERE subject='{subject}' AND text='{text}' 
                                                          AND user_id={user}""")[0]
                new_ids = [elem[0] for elem in db.select_with_fetchall(f"""SELECT homework_ids 
                                                                           FROM users 
                                                                           WHERE user_id={message.from_user.id}""")]
                if new_ids[0]:
                    new_ids.append(homework_id)
                else:
                    new_ids = [homework_id]
                db.query(f"""UPDATE users 
                             SET homework_ids='{' '.join([str(elem) for elem in new_ids])}' 
                             WHERE user_id={message.from_user.id}""")
            bot.send_message(chat_id=message.from_user.id, text=f"–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        else:
            bot.send_message(chat_id=message.from_user.id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª ‚òπÔ∏è –ú–æ–∂–µ—Ç /help?")


def main():
    bot.polling(non_stop=True)


if __name__ == '__main__':
    main()
